-- 12- User Defined Functions Alýþtýrma-5
-- Elimizde bir futbolcu listesi var ve futbolcularýn oynadýðý maçlarýn listesi var.
-- Her bir futbolcunun
-- Yaþýný, Yaþ grubunu
-- Futbolcunun puanýný
-- Kaç kez yedek kadroda çýktýðýný
-- Kaç kez asil kadroda çýktýðýný,
-- Kaç farklý takýmda oynadýðýný,
-- Toplam kaç maç yaptýðýný,
-- Kaç yýldýr futbol oynadýðýný getiren table valued fonksiyonu multi statement olarak yazýnýz.
-- Kaynak DB: LAB_UDF
-- Kaynak Tablo: LAB_PLAYER, LAB_MATCH_PLAYER

CREATE FUNCTION DBO.GETPLAYERINFO2(@PLAYERID AS INT)
RETURNS 
@RESULT TABLE
(
PLAYER_API_ID INT,
PLAYER_NAME VARCHAR(100),
TEAMNAME VARCHAR(100),
AGE INT,
AGEGROUP VARCHAR(100),
BACKUPCOUNT INT,
REALCOUNT INT,
TEAMCOUNT INT,
MATCHCOUNT INT,
TOTALYEAR INT,
RATING FLOAT,
FIRSTMATCHDATE DATE,
LASTMATCHDATE DATE
)
AS 
BEGIN
	INSERT INTO @RESULT
	SELECT PLAYER_API_ID,PLAYER_NAME,
	(SELECT TOP 1 TEAM FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID ORDER BY DATE_ DESC) TEAMNAME,
	DATEDIFF(YEAR,BIRTHDATE,GETDATE()) AGE,
	CASE
		WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) < 20 THEN '20 DEN KÜÇÜK'
		WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 20 AND 30 THEN '20-30 ARASI'
		WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 31 AND 40 THEN '31-40 ARASI'
		WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) > 40 THEN '40 TAN BÜYÜK'
	END AS AGEGROUP,
	(SELECT COUNT(*) FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID AND PLAYERTYPE='BACKUP') BACKUPCOUNT,
	(SELECT COUNT(*) FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID AND PLAYERTYPE='REAL') REALCOUNT,
	(SELECT COUNT(DISTINCT TEAM) FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID) TEAMCOUNT,
	(SELECT COUNT(*) FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID) MATCHCOUNT,
	(SELECT DATEDIFF(YEAR,MIN(DATE_),MAX(DATE_)) FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID) TOTALYEAR,
	RATING,
	(SELECT MIN(DATE_)FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID) FIRSTMATCHDATE,
	(SELECT MAX(DATE_) FROM LAB_MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID) LASTMATCHDATE
	FROM LAB_PLAYER P WHERE PLAYER_API_ID = @PLAYERID
	RETURN
END 

SELECT INF.* FROM LAB_PLAYER P
CROSS APPLY dbo.GETPLAYERINFO2(P.PLAYER_API_ID) INF
ORDER BY INF.RATING DESC