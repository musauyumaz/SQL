-- == Row Level Security Uygulamasý ==
CREATE DATABASE YENILIKLER
GO 
USE YENILIKLER
GO 
CREATE TABLE SATISLAR
(
	SATISID INT PRIMARY KEY IDENTITY,
	URUN NVARCHAR(MAX),
	ADET INT,
	KULLANICI NVARCHAR(MAX)
)
GO
INSERT SATISLAR VALUES
('AURUN',3,'MUSA'),
('AURUN',3,'GENÇAY'),
('BURUN',5,'MEHMET'),
('CURUN',13,'ALÝ'),
('DURUN',23,'GENÇAY'),
('EURUN',33,'MEHMET'),
('FURUN',43,'ALÝ'),
('GURUN',53,'GENÇAY'),
('HURUN',63,'MEHMET'),
('IURUN',73,'ALÝ'),
('OURUN',83,'GENÇAY'),
('PURUN',93,'MEHMET'),
('RURUN',133,'ALÝ')

-- Kullanýcýlarý oluþturalým...
CREATE USER GENCAY WITHOUT LOGIN
CREATE USER MEHMET WITHOUT LOGIN
CREATE USER ALI WITHOUT LOGIN

-- Bu kullanýcýlara SATISLAR tablosunda SELECT yetkisi verelim.
GRANT SELECT ON SATISLAR TO GENCAY
GRANT SELECT ON SATISLAR TO MEHMET
GRANT SELECT ON SATISLAR TO ALI

--ROW LEVEL SECURITY kullanabilmek için Inline Table Value Function oluþturmalýyýz.
CREATE FUNCTION ROWLEVELSECURITYFUNCTION (@KULLANICIADI AS SYSNAME)
RETURNS TABLE
WITH SCHEMABINDING
AS
RETURN SELECT 1 ROWLEVELRESULT
WHERE @KULLANICIADI = USER_NAME()

-- Þimdi bu fonksiyonu birazdan oluþturacaðýmýz Security Policy(Güvenlik Politikasý) için Filter Predicate olarak ekliyoruz. Yani uzun lafýn kýsasý filtre olarak ayarlýyoruz.
CREATE SECURITY POLICY GUVENLIKFILTRESI
ADD FILTER PREDICATE DBO.ROWLEVELSECURITYFUNCTION(KULLANICI)
ON DBO.SATISLAR
WITH(STATE = ON)

-- Dikkat ! ! !
-- KULLANILAN TÜM YAPIDA ÞEMA ADLARINI(.dbo) UNUTMA

EXEC AS USER = 'MEHMET'
SELECT * FROM SATISLAR